# Copyright (C) 2019 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>

# show any VCS object, similar to "git show"
# FIXME: we only show blobs for now
#
# This can use a "solver" to reconstruct blobs based on git
# patches (with abbreviated OIDs in the header).  However, the
# abbreviated OIDs must match exactly what's in the original
# email (unless a normal code repo already has the blob).
#
# In other words, we can only reliably reconstruct blobs based
# on links generated by ViewDiff (and only if the emailed
# patches apply 100% cleanly to published blobs).

package PublicInbox::ViewVCS;
use strict;
use warnings;
use Encode qw(find_encoding);
use PublicInbox::SolverGit;
use PublicInbox::WwwStream;
use PublicInbox::Linkify;
use PublicInbox::Hval qw(ascii_html to_filename src_escape);
my $hl = eval {
	require PublicInbox::HlMod;
	PublicInbox::HlMod->new;
};

my %QP_MAP = ( A => 'oid_a', B => 'oid_b', a => 'path_a', b => 'path_b' );
my $max_size = 1024 * 1024; # TODO: configurable
my $enc_utf8 = find_encoding('UTF-8');

sub html_page ($$$) {
	my ($ctx, $code, $strref) = @_;
	my $wcb = delete $ctx->{-wcb};
	$ctx->{-upfx} = '../../'; # from "/$INBOX/$OID/s/"
	my $res = PublicInbox::WwwStream->response($ctx, $code, sub {
		my ($nr, undef) =  @_;
		$nr == 1 ? $$strref : undef;
	});
	$wcb->($res);
}

sub solve_result {
	my ($ctx, $res, $log, $hints, $fn) = @_;

	unless (seek($log, 0, 0)) {
		$ctx->{env}->{'psgi.errors'}->print("seek(log): $!\n");
		return html_page($ctx, 500, \'seek error');
	}
	$log = do { local $/; <$log> };

	my $ref = ref($res);
	my $l = PublicInbox::Linkify->new;
	$l->linkify_1($log);
	$log = '<pre>debug log:</pre><hr /><pre>' .
		$l->linkify_2(ascii_html($log)) . '</pre>';

	$res or return html_page($ctx, 404, \$log);
	$ref eq 'ARRAY' or return html_page($ctx, 500, \$log);

	my ($git, $oid, $type, $size, $di) = @$res;
	if ($size > $max_size) {
		# TODO: stream the raw file if it's gigantic, at least
		$log = '<pre><b>Too big to show</b></pre>' . $log;
		return html_page($ctx, 500, \$log);
	}

	my $blob = $git->cat_file($oid);
	if (!$blob) { # WTF?
		my $e = "Failed to retrieve generated blob ($oid)";
		$ctx->{env}->{'psgi.errors'}->print("$e ($git->{git_dir})\n");
		$log = "<pre><b>$e</b></pre>" . $log;
		return html_page($ctx, 500, \$log);
	}

	my $binary = index($$blob, "\0") >= 0;
	if ($fn) {
		my $h = [ 'Content-Length', $size, 'Content-Type' ];
		push(@$h, ($binary ? 'application/octet-stream' : 'text/plain'));
		return delete($ctx->{-wcb})->([200, $h, [ $$blob ]]);
	}

	my $path = to_filename($di->{path_b} || $hints->{path_b} || 'blob');
	my $raw_link = "(<a\nhref=$path>raw</a>)";
	if ($binary) {
		$log = "<pre>$oid $type $size bytes (binary)" .
			" $raw_link</pre>" . $log;
		return html_page($ctx, 200, \$log);
	}

	$$blob = $enc_utf8->decode($$blob);
	my $nl = ($$blob =~ tr/\n/\n/);
	my $pad = length($nl);

	$l->linkify_1($$blob);
	my $ok = $hl->do_hl($blob, $path) if $hl;
	if ($ok) {
		$$ok = $enc_utf8->decode($$ok);
		src_escape($$ok);
		$blob = $ok;
	} else {
		$$blob = ascii_html($$blob);
	}

	# using some of the same CSS class names and ids as cgit
	$log = "<pre>$oid $type $size bytes $raw_link</pre>" .
		"<hr /><table\nclass=blob>".
		"<tr><td\nclass=linenumbers><pre>" . join('', map {
			sprintf("<a id=n$_ href=#n$_>% ${pad}u</a>\n", $_)
		} (1..$nl)) . '</pre></td>' .
		'<td><pre> </pre></td>'. # pad for non-CSS users
		"<td\nclass=lines><pre\nstyle='white-space:pre'><code>" .
		$l->linkify_2($$blob) .
		'</code></pre></td></tr></table>' . $log;

	html_page($ctx, 200, \$log);
}

sub show ($$;$) {
	my ($ctx, $oid_b, $fn) = @_;
	my $qp = $ctx->{qp};
	my $hints = {};
	while (my ($from, $to) = each %QP_MAP) {
		defined(my $v = $qp->{$from}) or next;
		$hints->{$to} = $v;
	}

	open my $log, '+>', undef or die "open: $!";
	my $solver = PublicInbox::SolverGit->new($ctx->{-inbox}, sub {
		solve_result($ctx, $_[0], $log, $hints, $fn);
	});

	# PSGI server will call this and give us a callback
	sub {
		$ctx->{-wcb} = $_[0]; # HTTP write callback
		$solver->solve($ctx->{env}, $log, $oid_b, $hints);
	};
}

1;
