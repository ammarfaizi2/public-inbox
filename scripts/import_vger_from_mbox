#!/usr/bin/perl -w
# Copyright (C) 2016-2018 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
use strict;
use warnings;
use Getopt::Long qw/:config gnu_getopt no_ignore_case auto_abbrev/;
use PublicInbox::MIME;
use PublicInbox::Inbox;
use PublicInbox::V2Writable;
use PublicInbox::Import;
my $usage = "usage: $0 NAME EMAIL DIR <MBOX\n";
my $dry_run;
my $version = 2;
my $variant = 'mboxrd';
my %opts = (
	'n|dry-run' => \$dry_run,
	'V|version=i' => \$version,
	'F|format=s' => \$variant,
);
GetOptions(%opts) or die $usage;
if ($variant ne 'mboxrd' && $variant ne 'mboxo') {
	die "Unsupported mbox variant: $variant\n";
}
my $name = shift or die $usage; # git
my $email = shift or die $usage; # git@vger.kernel.org
my $mainrepo = shift or die $usage; # /path/to/v2/repo
my $ibx = {
	mainrepo => $mainrepo,
	name => $name,
	version => $version,
	-primary_address => $email,
};
$ibx = PublicInbox::Inbox->new($ibx);
my $im;
unless ($dry_run) {
	if ($version >= 2) {
		$im = PublicInbox::V2Writable->new($ibx, 1);
	} else {
		system(qw(git init --bare -q), $mainrepo);
		my $git = PublicInbox::Git->new($mainrepo);
		$im = PublicInbox::Import->new($git, $name, $email, $ibx);
	}
}
binmode STDIN;
my $msg = '';
use PublicInbox::Filter::Vger;
my $vger = PublicInbox::Filter::Vger->new;

sub do_add ($$) {
	my ($im, $msg) = @_;
	$$msg =~ s/(\r?\n)+\z/$1/s;
	my $mime = PublicInbox::MIME->new($msg);
	if ($variant eq 'mboxrd') {
		$$msg =~ s/^>(>*From )/$1/sm;
	} elsif ($variant eq 'mboxo') {
		$$msg =~ s/^>From /From /sm;
	}
	$mime = $vger->scrub($mime);
	return unless $im;
	$im->add($mime) or
		warn "duplicate: ",
			$mime->header_obj->header_raw('Message-ID'), "\n";
}

# asctime: From example@example.com Fri Jun 23 02:56:55 2000
my $from_strict = qr/^From \S+ +\S+ \S+ +\S+ [^:]+:[^:]+:[^:]+ [^:]+/;
my $prev = undef;
while (defined(my $l = <STDIN>)) {
	if ($l =~ /$from_strict/o) {
		if (!defined($prev) || $prev =~ /^\r?$/) {
			do_add($im, \$msg) if $msg;
			$msg = '';
			$prev = $l;
			next;
		}
		warn "W[$.] $l\n";
	}
	$prev = $l;
	$msg .= $l;
}
do_add($im, \$msg) if $msg;
$im->done if $im;
