#!perl -w
# Copyright (C) 2020-2021 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
use strict;
use v5.10.1;
use Socket qw(AF_UNIX SOCK_STREAM pack_sockaddr_un);
my $send_3fds;
if (my ($sock, $pwd) = eval {
	require PublicInbox::Spawn;
	$send_3fds = PublicInbox::Spawn->can('send_3fds') or die
		"Inline::C not installed/configured or IO::FDPass missing\n";
	my $path = do {
		my $runtime_dir = ($ENV{XDG_RUNTIME_DIR} // '') . '/lei';
		if ($runtime_dir eq '/lei') {
			require File::Spec;
			$runtime_dir = File::Spec->tmpdir."/lei-$<";
		}
		unless (-d $runtime_dir) {
			require File::Path;
			File::Path::mkpath($runtime_dir, 0, 0700);
		}
		"$runtime_dir/sock";
	};
	my $addr = pack_sockaddr_un($path);
	socket(my $sock, AF_UNIX, SOCK_STREAM, 0) or die "socket: $!";
	unless (connect($sock, $addr)) { # start the daemon if not started
		local $ENV{PERL5LIB} = join(':', @INC);
		open(my $daemon, '-|', $^X, qw[-MPublicInbox::LEI
			-E PublicInbox::LEI::lazy_start(@ARGV)],
			$path, $! + 0) or die "popen: $!";
		while (<$daemon>) { warn $_ } # EOF when STDERR is redirected
		close($daemon) or warn <<"";
lei-daemon could not start, exited with \$?=$?

		# try connecting again anyways, unlink+bind may be racy
		unless (connect($sock, $addr)) {
			die <<"";
connect($path): $! (after attempted daemon start)
Falling back to (slow) one-shot mode

		}
	}
	require Cwd;
	my $pwd = $ENV{PWD} // '';
	my $cwd = Cwd::fastcwd() // die "fastcwd(PWD=$pwd): $!";
	if ($pwd ne $cwd) { # prefer ENV{PWD} if it's a symlink to real cwd
		my @st_cwd = stat($cwd) or die "stat(cwd=$cwd): $!";
		my @st_pwd = stat($pwd); # PWD invalid, use cwd
		# make sure st_dev/st_ino match for {PWD} to be valid
		$pwd = $cwd if (!@st_pwd || $st_pwd[1] != $st_cwd[1] ||
					$st_pwd[0] != $st_cwd[0]);
	} else {
		$pwd = $cwd;
	}
	($sock, $pwd);
}) { # IO::FDPass, $sock, $pwd are all available:
	local $ENV{PWD} = $pwd;
	my $buf = "$$\0\0>" . join("]\0[", @ARGV) . "\0\0>";
	while (my ($k, $v) = each %ENV) { $buf .= "$k=$v\0" }
	$buf .= "\0\0";
	select $sock;
	$| = 1; # unbuffer selected $sock
	$send_3fds->(fileno($sock), 0, 1, 2);
	print $sock $buf or die "print(sock, buf): $!";
	while ($buf = <$sock>) {
		$buf =~ /\Aexit=([0-9]+)\n\z/ and exit($1 + 0);
		die $buf;
	}
} else { # for systems lacking IO::FDPass
	# don't warn about IO::FDPass since it's not commonly installed
	warn $@ if $@ && index($@, 'IO::FDPass') < 0;
	require PublicInbox::LEI;
	PublicInbox::LEI::oneshot(__PACKAGE__);
}
