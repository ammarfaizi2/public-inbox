#!/usr/bin/perl -w
# Copyright (C) 2013-2015 all contributors <meta@public-inbox.org>
# License: AGPLv3 or later (https://www.gnu.org/licenses/agpl-3.0.txt)
#
# Mail delivery agent for public-inbox, run from your MTA upon mail delivery
use strict;
use warnings;
my $usage = 'public-inbox-mda < rfc2822_message';

use Email::Filter;
use Email::MIME;
use Email::MIME::ContentType;
$Email::MIME::ContentType::STRICT_PARAMS = 0; # user input is imperfect
use IPC::Run qw(run);
use PublicInbox::MDA;
use PublicInbox::Filter;
use PublicInbox::Config;
use PublicInbox::Import;
use PublicInbox::Git;

# n.b: hopefully we can setup the emergency path without bailing due to
# user error, we really want to setup the emergency destination ASAP
# in case there's bugs in our code or user error.
my $emergency = $ENV{PI_EMERGENCY} || "$ENV{HOME}/.public-inbox/emergency/";

# this reads the message from stdin
my $filter = Email::Filter->new(emergency => $emergency);
my $config = PublicInbox::Config->new;

my $recipient = $ENV{ORIGINAL_RECIPIENT};
defined $recipient or die "ORIGINAL_RECIPIENT not defined in ENV\n";
my $dst = $config->lookup($recipient); # first check
defined $dst or exit(1);
my $main_repo = $dst->{mainrepo} or exit(1);
my $filtered; # string dest

if (PublicInbox::MDA->precheck($filter->simple, $dst->{address}) &&
    do_spamc($filter->simple, \$filtered)) {
	# update our message with SA headers (in case our filter rejects it)
	my $msg = Email::MIME->new(\$filtered);
	$filtered = undef;
	$filter->simple($msg);

	my $filter_arg;
	my $fcfg = $dst->{filter};
	if (!defined $fcfg || $filter eq 'reject') {
		$filter_arg = $filter;
	} elsif ($fcfg eq 'scrub') {
		$filter_arg = undef; # the default for legacy versions
	} else {
		warn "publicinbox.$dst->{name}.filter=$fcfg invalid\n";
		warn "must be either 'scrub' or 'reject' (the default)\n";
	}

	if (PublicInbox::Filter->run($msg, $filter_arg)) {
		# run spamc again on the HTML-free message
		if (do_spamc($msg, \$filtered)) {
			$msg = Email::MIME->new(\$filtered);
			PublicInbox::MDA->set_list_headers($msg, $dst);
			$filter->simple($msg);

			END {
				index_sync($main_repo) if ($? == 0);
			};
			my $git = PublicInbox::Git->new($main_repo);
			my $im = PublicInbox::Import->new($git,
						$dst->{name}, $recipient);
			if (defined $im->add($msg)) {
				$im->done;
				$filter->ignore; # exits
			}
			# this message is similar to what ssoma-mda shows:
			print STDERR "CONFLICT: Message-ID: ",
				$msg->header_obj->header_raw('Message-ID'),
				" exists\n";
		}
	}
} else {
	# Ensure emergency spam gets spamassassin headers.
	# This makes it easier to prioritize obvious spam from less obvious
	if (defined($filtered) && $filtered ne '') {
		my $drop = Email::MIME->new(\$filtered);
		$filtered = undef;
		$filter->simple($drop);
	}
}
exit 0; # goes to emergency

# we depend on "report_safe 0" in /etc/spamassassin/*.cf with --headers
# not using Email::Filter->pipe here since we want the stdout of
# the command even on failure (spamc will set $? on error).
sub do_spamc {
	my ($msg, $out) = @_;
	eval {
		my $orig = $msg->as_string;
		run([qw/spamc -E --headers/], \$orig, $out);
	};

	return ($@ || $? || !defined($$out) || $$out eq '') ? 0 : 1;
}

sub index_sync {
	my ($git_dir) = @_;
	eval {
		require PublicInbox::SearchIdx;
		PublicInbox::SearchIdx->new($git_dir, 2)->index_sync;
	};
}
