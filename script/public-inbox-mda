#!/usr/bin/perl -w
# Copyright (C) 2013-2019 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
#
# Mail delivery agent for public-inbox, run from your MTA upon mail delivery
use strict;
use warnings;
my $usage = 'public-inbox-mda < rfc2822_message';
my ($ems, $emm);

sub do_exit {
	my ($code) = shift;
	$emm = $ems = undef; # trigger DESTROY
	exit $code;
}

use Email::Simple;
use PublicInbox::MIME;
use PublicInbox::MDA;
use PublicInbox::Config;
use PublicInbox::Emergency;
use PublicInbox::Filter::Base;
use PublicInbox::InboxWritable;
use PublicInbox::Spamcheck;

# n.b: hopefully we can setup the emergency path without bailing due to
# user error, we really want to setup the emergency destination ASAP
# in case there's bugs in our code or user error.
my $emergency = $ENV{PI_EMERGENCY} || "$ENV{HOME}/.public-inbox/emergency/";
$ems = PublicInbox::Emergency->new($emergency);
my $str = eval { local $/; <STDIN> };
$str =~ s/\A[\r\n]*From [^\r\n]*\r?\n//s;
$ems->prepare(\$str);
my $simple = Email::Simple->new(\$str);
my $config = PublicInbox::Config->new;
my $key = 'publicinboxmda.spamcheck';
my $default = 'PublicInbox::Spamcheck::Spamc';
my $spamc = PublicInbox::Spamcheck::get($config, $key, $default);
my $recipient = $ENV{ORIGINAL_RECIPIENT};
defined $recipient or die "ORIGINAL_RECIPIENT not defined in ENV\n";
my $dst = $config->lookup($recipient); # first check
defined $dst or do_exit(67); # EX_NOUSER 5.1.1 user unknown
$dst->{mainrepo} or do_exit(67);
$dst = PublicInbox::InboxWritable->new($dst);

# pre-check, MDA has stricter rules than an importer might;
do_exit(0) unless PublicInbox::MDA->precheck($simple, $dst->{address});
$simple = undef;
my $spam_ok;
if ($spamc) {
	$str = '';
	$spam_ok = $spamc->spamcheck($ems->fh, \$str);
	# update the emergency dump with the new message:
	$emm = PublicInbox::Emergency->new($emergency);
	$emm->prepare(\$str);
	$ems = $ems->abort;
} else { # no spam checking configured:
	$spam_ok = 1;
	$emm = $ems;
	my $fh = $emm->fh;
	read($fh, $str, -s $fh);
}

my $mime = PublicInbox::MIME->new(\$str);
do_exit(0) unless $spam_ok;

my $fcfg = $dst->{filter} || '';
# -mda defaults to the strict base filter
if ($fcfg eq '') {
	$dst->{filter} = 'PublicInbox::Filter::Base';
} elsif ($fcfg eq 'scrub') { # legacy alias, undocumented, remove?
	$dst->{filter} = 'PublicInbox::Filter::Mirror';
}
my $filter = $dst->filter;
my $ret = $filter->delivery($mime);
if (ref($ret) && $ret->isa('Email::MIME')) { # filter altered message
	$mime = $ret;
} elsif ($ret == PublicInbox::Filter::Base::IGNORE) {
	do_exit(0); # chuck it to emergency
} elsif ($ret == PublicInbox::Filter::Base::REJECT) {
	$! = 65; # EX_DATAERR 5.6.0 data format error
	die $filter->err, "\n";
} # else { accept
$filter = undef;

PublicInbox::MDA->set_list_headers($mime, $dst);
my $im = $dst->importer(0);
if (defined $im->add($mime)) {
	$emm = $emm->abort;
} else {
	# this message is similar to what ssoma-mda shows:
	print STDERR "CONFLICT: Message-ID: ",
			$mime->header_obj->header_raw('Message-ID'),
			" exists\n";
}

$im->done;
do_exit(0);
