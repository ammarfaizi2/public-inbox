#!/usr/bin/perl -w
# Copyright (C) 2013-2018 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
#
# Mail delivery agent for public-inbox, run from your MTA upon mail delivery
use strict;
use warnings;
my $usage = 'public-inbox-mda < rfc2822_message';
my ($ems, $emm);

sub do_exit {
	my ($code) = shift;
	$emm = $ems = undef; # trigger DESTROY
	exit $code;
}

use Email::Simple;
use Email::MIME;
use Email::MIME::ContentType;
$Email::MIME::ContentType::STRICT_PARAMS = 0; # user input is imperfect
use PublicInbox::MDA;
use PublicInbox::Config;
use PublicInbox::Import;
use PublicInbox::Git;
use PublicInbox::Emergency;
use PublicInbox::Filter::Base;
use PublicInbox::Spamcheck::Spamc;

# n.b: hopefully we can setup the emergency path without bailing due to
# user error, we really want to setup the emergency destination ASAP
# in case there's bugs in our code or user error.
my $emergency = $ENV{PI_EMERGENCY} || "$ENV{HOME}/.public-inbox/emergency/";
$ems = PublicInbox::Emergency->new($emergency);
my $str = eval { local $/; <STDIN> };
$str =~ s/\A[\r\n]*From [^\r\n]*\r?\n//s;
$ems->prepare(\$str);
my $simple = Email::Simple->new(\$str);
my $config = PublicInbox::Config->new;

my $recipient = $ENV{ORIGINAL_RECIPIENT};
defined $recipient or die "ORIGINAL_RECIPIENT not defined in ENV\n";
my $dst = $config->lookup($recipient); # first check
defined $dst or do_exit(1);
my $main_repo = $dst->{mainrepo} or do_exit(1);

# pre-check, MDA has stricter rules than an importer might;
do_exit(0) unless PublicInbox::MDA->precheck($simple, $dst->{address});
my $spamc = PublicInbox::Spamcheck::Spamc->new;
$str = '';
my $spam_ok = $spamc->spamcheck($ems->fh, \$str);
$simple = undef;
$emm = PublicInbox::Emergency->new($emergency);
$emm->prepare(\$str);
$ems = $ems->abort;
my $mime = PublicInbox::MIME->new(\$str);
$str = '';
do_exit(0) unless $spam_ok;

my $fcfg = $dst->{filter} || '';
my $filter;
if ($fcfg =~ /::/) {
	eval "require $fcfg";
	die $@ if $@;
	$filter = $fcfg->new;
} elsif ($fcfg eq 'scrub') { # TODO:
	require PublicInbox::Filter::Mirror;
	$filter = PublicInbox::Filter::Mirror->new;
} else {
	$filter = PublicInbox::Filter::Base->new;
}

my $ret = $filter->delivery($mime);
if (ref($ret) && $ret->isa('Email::MIME')) { # filter altered message
	$mime = $ret;
} elsif ($ret == PublicInbox::Filter::Base::IGNORE) {
	do_exit(0); # chuck it to emergency
} elsif ($ret == PublicInbox::Filter::Base::REJECT) {
	$! = $ret;
	die $filter->err, "\n";
} # else { accept

PublicInbox::MDA->set_list_headers($mime, $dst);
my $git = PublicInbox::Git->new($main_repo);
my $im = PublicInbox::Import->new($git, $dst->{name}, $recipient);
if (defined $im->add($mime)) {
	$emm = $emm->abort;
} else {
	# this message is similar to what ssoma-mda shows:
	print STDERR "CONFLICT: Message-ID: ",
			$mime->header_obj->header_raw('Message-ID'),
			" exists\n";
}

$im->done;
do_exit(0);
