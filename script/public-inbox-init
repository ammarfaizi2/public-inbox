#!/usr/bin/perl -w
# Copyright (C) 2014-2018 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
#
# Initializes a public-inbox, basically a wrapper for git-init(1)
use strict;
use warnings;
my $usage = "public-inbox-init NAME REPO_DIR HTTP_URL ADDRESS [ADDRESS..]";
use Getopt::Long qw/:config gnu_getopt no_ignore_case auto_abbrev/;
use PublicInbox::Config;
use File::Temp qw/tempfile/;
use File::Basename qw/dirname/;
use File::Path qw/mkpath/;
use Cwd qw/abs_path/;

sub x { system(@_) and die join(' ', @_). " failed: $?\n" }
sub usage { print STDERR "Usage: $usage\n"; exit 1 }
my $version = undef;
my $indexlevel = undef;
my $skip;
my %opts = ( 'V|version=i' => \$version,
	     'L|indexlevel=s' => \$indexlevel,
	     'S|skip=i' => \$skip,
);
GetOptions(%opts) or usage();
my $name = shift @ARGV or usage();
my $mainrepo = shift @ARGV or usage();
my $http_url = shift @ARGV or usage();
my (@address) = @ARGV;
@address or usage();
my %seen;

my $pi_config = PublicInbox::Config->default_file;
my $dir = dirname($pi_config);
mkpath($dir); # will croak on fatal errors
my ($fh, $pi_config_tmp) = tempfile('pi-init-XXXXXXXX', DIR => $dir);
if (-e $pi_config) {
	open(my $oh, '<', $pi_config) or die "unable to read $pi_config: $!\n";
	my @st = stat($oh);
	my $perm = $st[2];
	defined $perm or die "(f)stat failed on $pi_config: $!\n";
	chmod($perm & 07777, $fh) or
		die "(f)chmod failed on future $pi_config: $!\n";
	my $old;
	{
		local $/;
		$old = <$oh>;
	}
	print $fh $old or die "failed to write: $!\n";
	close $oh or die "failed to close $pi_config: $!\n";

	# yes, this conflict checking is racy if multiple instances of this
	# script are run by the same $PI_DIR
	my $cfg = PublicInbox::Config->new;
	my $conflict;
	foreach my $addr (@address) {
		my $found = $cfg->lookup($addr);
		if ($found) {
			if ($found->{name} ne $name) {
				print STDERR
					"`$addr' already defined for ",
					"`$found->{name}',\n",
					"does not match intend `$name'\n";
				$conflict = 1;
			} else {
				$seen{lc($addr)} = 1;
			}
		}
	}

	exit(1) if $conflict;

	my $ibx = $cfg->lookup_name($name);
	if ($ibx) {
		if (!defined($indexlevel) && $ibx->{indexlevel}) {
			$indexlevel = $ibx->{indexlevel};
		}
	}
}
close $fh or die "failed to close $pi_config_tmp: $!\n";

my $pfx = "publicinbox.$name";
my @x = (qw/git config/, "--file=$pi_config_tmp");

$mainrepo = abs_path($mainrepo);
if (-f "$mainrepo/inbox.lock") {
	if (!defined $version) {
		$version = 2;
	} elsif ($version != 2) {
		die "$mainrepo is a -V2 repo, -V$version specified\n"
	}
} elsif (-d "$mainrepo/objects") {
	if (!defined $version) {
		$version = 1;
	} elsif ($version != 1) {
		die "$mainrepo is a -V1 repo, -V$version specified\n"
	}
}

$version = 1 unless defined $version;

if ($version == 1 && defined $skip) {
	die "--skip is only supported for -V2 repos\n";
}

if ($version >= 2) {
	require PublicInbox::V2Writable;
	require PublicInbox::Inbox;
	my $ibx = {
		mainrepo => $mainrepo,
		name => $name,
		version => $version,
		-primary_address => $address[0],
	};
	$ibx = PublicInbox::Inbox->new($ibx);
	PublicInbox::V2Writable->new($ibx, 1)->init_inbox(0, $skip);
} elsif ($version == 1) {
	x(qw(git init -q --bare), $mainrepo);

	# set a reasonable default:
	x(qw/git config/, "--file=$mainrepo/config",
		'repack.writeBitmaps', 'true');
} else {
	die "Unsupported -V/--version: $version\n";
}

foreach my $addr (@address) {
	next if $seen{lc($addr)};
	x(@x, "--add", "$pfx.address", $addr);
}
x(@x, "$pfx.url", $http_url);
x(@x, "$pfx.mainrepo", $mainrepo);

if (defined($indexlevel)) {
	x(@x, "$pfx.indexlevel", $indexlevel);
}

rename $pi_config_tmp, $pi_config or
	die "failed to rename `$pi_config_tmp' to `$pi_config': $!\n";
