#!perl -w
# Copyright (C) 2014-2020 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
use strict;
use v5.10.1;
use Getopt::Long qw/:config gnu_getopt no_ignore_case auto_abbrev/;
use Fcntl qw(:DEFAULT);
my $usage = 'public-inbox-init NAME INBOX_DIR HTTP_URL ADDRESS [ADDRESS..]';
my $help = <<EOF; # the following should fit w/o scrolling in 80x24 term:
usage: $usage

  Initialize a public-inbox

required arguments:

  NAME                the name of the inbox
  INBOX_DIR           pathname the inbox
  HTTP_URL            HTTP (or HTTPS) URL
  ADDRESS             email address(es), may be specified multiple times

options:

  -V2                 use scalable public-inbox-v2-format(5)
  -L LEVEL            index level `basic', `medium', or `full' (default: full)
  --skip-artnum=NUM   NNTP article numbers to skip
  --skip-epoch=NUM    epochs to skip (-V2 only)
  -J JOBS             number of indexing jobs (-V2 only), (default: 4)

See public-inbox-init(1) man page for full documentation.
EOF

require PublicInbox::Admin;
PublicInbox::Admin::require_or_die('-base');

my ($version, $indexlevel, $skip_epoch, $skip_artnum, $jobs, $show_help);
my %opts = (
	'V|version=i' => \$version,
	'L|index-level|indexlevel=s' => \$indexlevel,
	'S|skip|skip-epoch=i' => \$skip_epoch,
	'N|skip-artnum=i' => \$skip_artnum,
	'j|jobs=i' => \$jobs,
	'help|?' => \$show_help,
);
my $usage_cb = sub {
	print STDERR "Usage: $usage\n";
	exit 1;
};
GetOptions(%opts) or $usage_cb->();
if ($show_help) { print $help; exit 0 };
PublicInbox::Admin::indexlevel_ok_or_die($indexlevel) if defined $indexlevel;
my $name = shift @ARGV or $usage_cb->();
my $inboxdir = shift @ARGV or $usage_cb->();
my $http_url = shift @ARGV or $usage_cb->();
my (@address) = @ARGV;
@address or $usage_cb->();
my %seen;

require PublicInbox::Config;
my $pi_config = PublicInbox::Config->default_file;
require File::Basename;
my $dir = File::Basename::dirname($pi_config);
require File::Path;
File::Path::mkpath($dir); # will croak on fatal errors

# first, we grab a flock to prevent simultaneous public-inbox-init
# processes from trampling over each other, or exiting with 255 on
# O_EXCL failure below.  This gets unlocked automatically on exit:
require PublicInbox::Lock;
my $lock_obj = { lock_path => "$pi_config.flock" };
PublicInbox::Lock::lock_acquire($lock_obj);

# git-config will operate on this (and rename on success):
require File::Temp;
my $fh = File::Temp->new(TEMPLATE => 'pi-init-XXXXXXXX', DIR => $dir);

# Now, we grab another lock to use git-config(1) locking, so it won't
# wait on the lock, unlike some of our internal flock()-based locks.
# This is to prevent direct git-config(1) usage from clobbering our
# changes.
my $lockfile = "$pi_config.lock";
my $lockfh;
sysopen($lockfh, $lockfile, O_RDWR|O_CREAT|O_EXCL) or do {
	warn "could not open config file: $lockfile: $!\n";
	exit(255);
};
my $auto_unlink = UnlinkMe->new($lockfile);
my $perm;
if (-e $pi_config) {
	open(my $oh, '<', $pi_config) or die "unable to read $pi_config: $!\n";
	my @st = stat($oh);
	$perm = $st[2];
	defined $perm or die "(f)stat failed on $pi_config: $!\n";
	chmod($perm & 07777, $fh) or
		die "(f)chmod failed on future $pi_config: $!\n";
	my $old;
	{
		local $/;
		$old = <$oh>;
	}
	print $fh $old or die "failed to write: $!\n";
	close $oh or die "failed to close $pi_config: $!\n";

	# yes, this conflict checking is racy if multiple instances of this
	# script are run by the same $PI_DIR
	my $cfg = PublicInbox::Config->new;
	my $conflict;
	foreach my $addr (@address) {
		my $found = $cfg->lookup($addr);
		if ($found) {
			if ($found->{name} ne $name) {
				print STDERR
					"`$addr' already defined for ",
					"`$found->{name}',\n",
					"does not match intend `$name'\n";
				$conflict = 1;
			} else {
				$seen{lc($addr)} = 1;
			}
		}
	}

	exit(1) if $conflict;

	my $ibx = $cfg->lookup_name($name);
	$indexlevel //= $ibx->{indexlevel} if $ibx;
}
my $pi_config_tmp = $fh->filename;
close($fh) or die "failed to close $pi_config_tmp: $!\n";

my $pfx = "publicinbox.$name";
my @x = (qw/git config/, "--file=$pi_config_tmp");

require Cwd;
$inboxdir = Cwd::abs_path($inboxdir);
die "`\\n' not allowed in `$inboxdir'\n" if $inboxdir =~ /\n/s;
if (-f "$inboxdir/inbox.lock") {
	if (!defined $version) {
		$version = 2;
	} elsif ($version != 2) {
		die "$inboxdir is a -V2 inbox, -V$version specified\n"
	}
} elsif (-d "$inboxdir/objects") {
	if (!defined $version) {
		$version = 1;
	} elsif ($version != 1) {
		die "$inboxdir is a -V1 inbox, -V$version specified\n"
	}
}

$version = 1 unless defined $version;

if ($version == 1 && defined $skip_epoch) {
	die "--skip-epoch is only supported for -V2 inboxes\n";
}

my $ibx = PublicInbox::Inbox->new({
	inboxdir => $inboxdir,
	name => $name,
	version => $version,
	-primary_address => $address[0],
	indexlevel => $indexlevel,
});

my $creat_opt = {};
if (defined $jobs) {
	die "--jobs is only supported for -V2 inboxes\n" if $version == 1;
	die "--jobs=$jobs must be >= 1\n" if $jobs <= 0;
	$creat_opt->{nproc} = $jobs;
}

require PublicInbox::InboxWritable;
$ibx = PublicInbox::InboxWritable->new($ibx, $creat_opt);
$ibx->init_inbox(0, $skip_epoch, $skip_artnum);

# needed for git prior to v2.1.0
umask(0077) if defined $perm;

foreach my $addr (@address) {
	next if $seen{lc($addr)};
	PublicInbox::Import::run_die([@x, "--add", "$pfx.address", $addr]);
}
PublicInbox::Import::run_die([@x, "$pfx.url", $http_url]);
PublicInbox::Import::run_die([@x, "$pfx.inboxdir", $inboxdir]);

if (defined($indexlevel)) {
	PublicInbox::Import::run_die([@x, "$pfx.indexlevel", $indexlevel]);
}

# needed for git prior to v2.1.0
if (defined $perm) {
	chmod($perm & 07777, $pi_config_tmp) or
			die "(f)chmod failed on future $pi_config: $!\n";
}

rename $pi_config_tmp, $pi_config or
	die "failed to rename `$pi_config_tmp' to `$pi_config': $!\n";
$auto_unlink->DESTROY;

package UnlinkMe;
use strict;

sub new {
	my ($klass, $file) = @_;
	bless { file => $file }, $klass;
}

sub DESTROY {
	my $f = delete($_[0]->{file});
	unlink($f) if defined($f);
}
1;
