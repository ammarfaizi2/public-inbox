#!/usr/bin/perl -w
# Copyright (C) 2015-2020 all contributors <meta@public-inbox.org>
# License: AGPL-3.0+ <https://www.gnu.org/licenses/agpl-3.0.txt>
# Basic tool to create a Xapian search index for a public-inbox.
# Usage with libeatmydata <https://www.flamingspork.com/projects/libeatmydata/>
# highly recommended: eatmydata public-inbox-index INBOX_DIR

use strict;
use warnings;
use Getopt::Long qw(:config gnu_getopt no_ignore_case auto_abbrev);
my $usage = "public-inbox-index INBOX_DIR";
use PublicInbox::Admin;
PublicInbox::Admin::require_or_die('-index');
use PublicInbox::Xapcmd;

my $compact_opt;
my $opt = { quiet => -1, compact => 0, maxsize => undef };
GetOptions($opt, qw(verbose|v+ reindex rethread compact|c+ jobs|j=i prune
		indexlevel|L=s maxsize|max-size=s batchsize|batch-size=s))
	or die "bad command-line args\n$usage";
die "--jobs must be >= 0\n" if defined $opt->{jobs} && $opt->{jobs} < 0;

if ($opt->{compact}) {
	require PublicInbox::Xapcmd;
	PublicInbox::Xapcmd::check_compact();
	$compact_opt = { -coarse_lock => 1, compact => 1 };
}

my $cfg = PublicInbox::Config->new;
my @ibxs = PublicInbox::Admin::resolve_inboxes(\@ARGV, undef, $cfg);
PublicInbox::Admin::require_or_die('-index');
unless (@ibxs) { print STDERR "Usage: $usage\n"; exit 1 }

my $max_size = $opt->{maxsize} // $cfg->{lc('publicInbox.indexMaxSize')};
if (defined $max_size) {
	PublicInbox::Admin::parse_unsigned(\$max_size) or
		die "`publicInbox.indexMaxSize=$max_size' not parsed\n";
}

if (my $bs = $opt->{batchsize} // $cfg->{lc('publicInbox.indexBatchSize')}) {
	PublicInbox::Admin::parse_unsigned(\$bs) or
		die "`publicInbox.indexBatchSize=$bs' not parsed\n";
	$PublicInbox::SearchIdx::BATCH_BYTES = $bs;
}

my $mods = {};
foreach my $ibx (@ibxs) {
	# XXX: users can shoot themselves in the foot, with opt->{indexlevel}
	$ibx->{indexlevel} //= $opt->{indexlevel} //
			PublicInbox::Admin::detect_indexlevel($ibx);
	$ibx->{index_max_size} = $max_size;
	PublicInbox::Admin::scan_ibx_modules($mods, $ibx);
}

PublicInbox::Admin::require_or_die(keys %$mods);
PublicInbox::Admin::progress_prepare($opt);
for my $ibx (@ibxs) {
	$ibx = PublicInbox::InboxWritable->new($ibx);
	if ($opt->{compact} >= 2) {
		PublicInbox::Xapcmd::run($ibx, 'compact', $compact_opt);
	}
	PublicInbox::Admin::index_inbox($ibx, undef, $opt);
	PublicInbox::Xapcmd::run($ibx, 'compact', $compact_opt) if $compact_opt;
}
