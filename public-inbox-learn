#!/usr/bin/perl -w
# Copyright (C) 2014, Eric Wong <normalperson@yhbt.net> and all contributors
# License: AGPLv3 or later (https://www.gnu.org/licenses/agpl-3.0.txt)
my $usage = "$0 (spam|ham) < /path/to/message";
use strict;
use warnings;
use PublicInbox::Config;
use Email::MIME;
use Email::Address;
use IPC::Run qw/run/;
my $train = shift or die "usage: $usage\n";
if ($train !~ /\A(?:ham|spam)\z/) {
	die "`$train' not recognized.\nusage: $usage\n";
}

my $pi_config = PublicInbox::Config->new;
my $mime = Email::MIME->new(eval { local $/; <> });

# get all recipients
my %dests;
foreach my $h (qw(Cc To)) {
	foreach my $recipient (Email::Address->parse($mime->header($h))) {
		$dests{lc($recipient->address)} = 1;
	}
}

my $in = $mime->as_string;
$mime->body_set('');

my $err = 0;
my @output = qw(> /dev/null > /dev/null);

# n.b. message may be cross-posted to multiple public-inboxes
foreach my $recipient (keys %dests) {
	my $dst = $pi_config->lookup($recipient) or next;
	my $git_dir = $dst->{mainrepo} or next;
	my ($out, $err) = ("", "");

	# We do not touch GIT_COMMITTER_* env here so we can track
	# who trained the message.
	# We will not touch GIT_AUTHOR_* when learning spam messages, either
	if ($train eq "spam") {
		# This needs to be idempotent, as my inotify trainer
		# may train for each cross-posted message, and this
		# script already learns for every list in
		# ~/.public-inbox/config
		if (!run(["ssoma-rm", $git_dir], \$in, \$out, \$err)) {
			if ($err !~ /^git cat-file .+ failed: 32768$/) {
				$err = 1;
			}
		}
	} else { # $train eq "ham"
		require PublicInbox::MDA;
		require PublicInbox::Filter;

		# no checking for errors here, we assume the message has
		# been reviewed by a human at this point:
		PublicInbox::Filter->run($mime);
		PublicInbox::MDA->set_list_headers($mime, $dst);

		my ($name, $email, $date) =
				PublicInbox::MDA->author_info($mime);
		local $ENV{GIT_AUTHOR_NAME} = $name;
		local $ENV{GIT_AUTHOR_EMAIL} = $email;
		local $ENV{GIT_AUTHOR_DATE} = $date;

		# Ham messages are trained when they're marked into
		# a SEEN state, so this is idempotent:
		run([PublicInbox::MDA->cmd, $git_dir], \$in, \$out, \$err);
		if ($err !~ /CONFLICT/) {
			$err = 1;
		}
	}
	if (!run([qw(spamc -L), $train], \$in, @output)) {
		$err = 1;
	}
}
exit $err;
