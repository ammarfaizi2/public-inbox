#!/usr/bin/perl -w
# Copyright (C) 2013, Eric Wong <normalperson@yhbt.net> and all contributors
# License: AGPLv3 or later (https://www.gnu.org/licenses/agpl-3.0.txt)
use strict;
use warnings;
my $usage = 'public-inbox-mda < rfc2822_message';

use Email::Filter;
use Email::Address;
use Encode qw/decode encode/;
use Encode::MIME::Header;
use File::Path::Expand qw/expand_filename/;
use IPC::Run qw(run);
use constant MDA => 'ssoma-mda';
use PublicInbox::MDA;
use PublicInbox::Filter;
use PublicInbox::Config;

# n.b: hopefully we can setup the emergency path without bailing due to
# user error, we really want to setup the emergency destination ASAP
# in case there's bugs in our code or user error.
my $emergency = $ENV{PI_EMERGENCY} || '~/.public-inbox/emergency/';
$emergency = expand_filename($emergency);

# this reads the message from stdin
my $filter = Email::Filter->new(emergency => $emergency);
my $config = PublicInbox::Config->new;

my $recipient = $ENV{RECIPIENT};
defined $recipient or die "RECIPIENT not defined in ENV\n";
my $dst = $config->lookup($recipient);
defined $dst or exit(1);
my $main_repo = $dst->{mainrepo} or exit(1);
my $filtered; # string dest

if (PublicInbox::MDA->precheck($filter, $recipient) &&
    do_spamc($filter->simple, \$filtered)) {
	# update our message with SA headers (in case our filter rejects it)
	my $simple = Email::Simple->new($filtered);
	$filtered = undef;
	$filter->simple($simple);

	if (PublicInbox::Filter->run($simple)) {
		# run spamc again on the HTML-free message
		if (do_spamc($simple, \$filtered)) {
			$simple = Email::Simple->new($filtered);
			set_list_headers($simple, $dst);
			$filter->simple($simple);

			my $from = decode('MIME-Header', $filter->from);
			$from = encode("utf8", $from);
			my @from = Email::Address->parse($from);
			my $name = $from[0]->name;
			defined $name or $name = "";
			my $email = $from[0]->address;
			defined $email or $email = "";
			local $ENV{GIT_AUTHOR_NAME} = $name;
			local $ENV{GIT_AUTHOR_EMAIL} = $email;
			local $ENV{GIT_AUTHOR_DATE} = $simple->header("Date");
			local $ENV{GIT_COMMITTER_EMAIL} = $recipient;
			local $ENV{GIT_COMMITTER_NAME} = $dst->{listname};

			$filter->pipe(MDA, '-1', $main_repo);
		}
	}
}
exit 0; # goes to emergency

# we depend on "report_safe 0" in /etc/spamassassin/*.cf with --headers
# not using Email::Filter->pipe here since we want the stdout of
# the command even on failure (spamc will set $? on error).
sub do_spamc {
	my ($simple, $out) = @_;
	eval {
		my $orig = $simple->as_string;
		run([qw/spamc -E --headers/], \$orig, $out);
	};

	return ($@ || $? || !defined($$out) || length($$out) == 0) ? 0 : 1;
}

# RFC2919 and RFC2369
sub set_list_headers {
	my ($simple, $dst) = @_;
	my $pa = "<$dst->{-primary_address}>";
	$simple->header_set("List-Id", $pa);
	$simple->header_set("List-Post", $pa);

	my $url = $dst->{url};
	if (defined $url) {
		$simple->header_set("List-Archive", "<$url>");
		$simple->header_set("List-Help", "<${url}help>");
	}
}
