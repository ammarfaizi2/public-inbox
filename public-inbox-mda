#!/usr/bin/perl -w
# Copyright (C) 2013, Eric Wong <normalperson@yhbt.net> and all contributors
# License: AGPLv3 or later (https://www.gnu.org/licenses/agpl-3.0.txt)
use strict;
use warnings;
my $usage = 'public-inbox-mda < rfc2822_message';

use Email::Filter;
use Email::MIME;
use Email::Address;
use File::Path::Expand qw/expand_filename/;
use IPC::Run qw(run);
use PublicInbox::MDA;
use PublicInbox::Filter;
use PublicInbox::Config;

# n.b: hopefully we can setup the emergency path without bailing due to
# user error, we really want to setup the emergency destination ASAP
# in case there's bugs in our code or user error.
my $emergency = $ENV{PI_EMERGENCY} || '~/.public-inbox/emergency/';
$emergency = expand_filename($emergency);

# this reads the message from stdin
my $filter = Email::Filter->new(emergency => $emergency);
my $config = PublicInbox::Config->new;

my $recipient = $ENV{ORIGINAL_RECIPIENT};
defined $recipient or die "ORIGINAL_RECIPIENT not defined in ENV\n";
my $dst = $config->lookup($recipient); # first check
defined $dst or exit(1);
my $main_repo = $dst->{mainrepo} or exit(1);
my $filtered; # string dest

if (PublicInbox::MDA->precheck($filter, $dst->{address}) &&
    do_spamc($filter->simple, \$filtered)) {
	# update our message with SA headers (in case our filter rejects it)
	my $msg = Email::Simple->new($filtered);
	$filtered = undef;
	$filter->simple($msg);

	if (PublicInbox::Filter->run($msg)) {
		# run spamc again on the HTML-free message
		if (do_spamc($msg, \$filtered)) {
			$msg = Email::MIME->new($filtered);
			PublicInbox::MDA->set_list_headers($msg, $dst);
			$filter->simple($msg);

			my ($name, $email, $date) =
					PublicInbox::MDA->author_info($msg);
			local $ENV{GIT_AUTHOR_NAME} = $name;
			local $ENV{GIT_AUTHOR_EMAIL} = $email;
			local $ENV{GIT_AUTHOR_DATE} = $date;
			local $ENV{GIT_COMMITTER_EMAIL} = $recipient;
			local $ENV{GIT_COMMITTER_NAME} = $dst->{listname};

			$filter->pipe(PublicInbox::MDA->cmd, $main_repo);
		}
	}
}
exit 0; # goes to emergency

# we depend on "report_safe 0" in /etc/spamassassin/*.cf with --headers
# not using Email::Filter->pipe here since we want the stdout of
# the command even on failure (spamc will set $? on error).
sub do_spamc {
	my ($msg, $out) = @_;
	eval {
		my $orig = $msg->as_string;
		run([qw/spamc -E --headers/], \$orig, $out);
	};

	return ($@ || $? || !defined($$out) || length($$out) == 0) ? 0 : 1;
}
